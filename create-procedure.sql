SET SERVEROUTPUT ON;


--WE WANT TO RAISE SALARY FOR EMPLOYEES WHO HAVEN'T MANAGER
CREATE OR REPLACE PROCEDURE RAISE_SALARY (
    RESULT_MESSAGE OUT VARCHAR2,
    EMP_ID  IN NUMBER,
    INCREASE_SALARY_PCT  IN NUMBER 
)
AS
    --DECLARE VARIABLES
    MAX_SALARY                  CONSTANT NUMBER(6) := 100000;
    EMP_SALARY                  EMPLOYEES.SALARY%TYPE;
    EMP_MANAGER                 EMPLOYEES.MANAGER_ID%TYPE;
    EMP_DEPARTMENT              EMPLOYEES.DEPARTMENT_ID%TYPE;
    INCREASED_SALARY            EMP_SALARY%TYPE; 
        
    --DECLARE EXCEPTIONS
    SALARY_IS_MAX   EXCEPTION;
    NO_DEPARTMENT   EXCEPTION;
    HAVE_MANAGER    EXCEPTION;
    UPDATE_ERROR    EXCEPTION;    
BEGIN

    --RETRIEVE EMPLOYEE BY DEPARTMENT ID
    SELECT SALARY , DEPARTMENT_ID , MANAGER_ID
    INTO EMP_SALARY , EMP_DEPARTMENT , EMP_MANAGER
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = EMP_ID;

    --RAISE EXCEPTIONS
    IF EMP_DEPARTMENT IS NULL THEN 
       RAISE NO_DEPARTMENT;     
    END IF;

    IF EMP_MANAGER IS NOT NULL THEN 
       RAISE HAVE_MANAGER;     
    END IF;

   
    
    --RAISE SALARY AND UPDATE
    IF (EMP_SALARY IS NOT NULL ) AND (EMP_SALARY > 0) THEN
    
            increased_salary := EMP_SALARY + (EMP_SALARY * INCREASE_SALARY_PCT);
            
             IF increased_salary > MAX_SALARY THEN
                RAISE SALARY_IS_MAX;
             END IF;
            
            UPDATE EMPLOYEES
            SET SALARY = INCREASED_SALARY
            WHERE EMPLOYEE_ID = EMP_ID;

            IF SQL%ROWCOUNT <> 1 THEN 
                RAISE UPDATE_ERROR;
            END IF;
            
            COMMIT;

        RESULT_MESSAGE := 'EMPLOYEES SALARY IS INCREASED';
        
        ELSE
            RESULT_MESSAGE := q'!This Employee's salary is null or 0!';
    END IF;

    --CATCH EXCEPTIONS
    EXCEPTION
        WHEN NO_DEPARTMENT THEN 
            RESULT_MESSAGE := q'!This Employee hasn't any department!';
    
        WHEN HAVE_MANAGER THEN
            RESULT_MESSAGE := 'This Employee has manager';

        WHEN SALARY_IS_MAX THEN
            RESULT_MESSAGE := q'!This Employee's salary is maximum!';
        
        WHEN UPDATE_ERROR THEN
            RESULT_MESSAGE := 'DATABASE ERROR : UPDATE FAIL';
            
        WHEN NO_DATA_FOUND THEN
            RESULT_MESSAGE:= 'NO DATA FOUND FOR THIS EMPLOYEE ID';

        WHEN OTHERS THEN
            RESULT_MESSAGE := 'UNKNOWN ERROR';               
END;


CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE( 
    INPUT_NAME IN VARCHAR2,
    INPUT_SURNAME IN VARCHAR2,
    INPUT_EMAIL IN VARCHAR2,
    INPUT_SALARY IN NUMBER
)
AS
    MAX_SALARY      CONSTANT NUMBER := 100000;
    
    INSERT_ERROR    EXCEPTION;
    SALARY_IS_MAX   EXCEPTION;
    
BEGIN

    IF input_salary > MAX_SALARY THEN
        RAISE SALARY_IS_MAX;
     END IF;   

    INSERT INTO EMPLOYEES(EMPLOYEE_ID , FIRST_NAME , LAST_NAME , EMAIL , HIRE_DATE , SALARY)
    VALUES(EMPLOYEES_SEQ.NEXTVAL , INPUT_NAME , INPUT_SURNAME , INPUT_EMAIL , SYSDATE , INPUT_SALARY);
    
    IF SQL%ROWCOUNT <> 1 THEN 
        RAISE INSERT_ERROR;
    END IF;
            
    COMMIT;

    EXCEPTION
        WHEN INSERT_ERROR THEN
            DBMS_OUTPUT.PUT_LINE('INSERT ERROR');
        WHEN SALARY_IS_MAX THEN
            DBMS_OUTPUT.PUT_LINE('SALARY CAN NOT BE MORE THAN 100_000');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('UNKNOWN ERROR');
            DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
            DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE : ' || SQLERRM);
END INSERT_EMPLOYEE;